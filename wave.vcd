$date
	Tue May 20 15:20:25 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpu_tb $end
$var wire 1 ! halted $end
$var wire 64 " pc [63:0] $end
$var reg 1 # clk $end
$var reg 1 $ reset $end
$scope module uut $end
$var wire 1 % Reg2Loc $end
$var wire 5 & Write_register [4:0] $end
$var wire 1 # clk $end
$var wire 1 ! halted $end
$var wire 1 ' pc_select $end
$var wire 1 $ reset $end
$var wire 64 ( pc_norm [63:0] $end
$var wire 64 ) pc_mux [63:0] $end
$var wire 64 * pc_jump [63:0] $end
$var wire 64 + padded_imm [63:0] $end
$var wire 32 , instruction [31:0] $end
$var wire 1 - alu_zero $end
$var wire 64 . alu_result [63:0] $end
$var wire 4 / alu_op [3:0] $end
$var wire 64 0 alu_mux [63:0] $end
$var wire 1 1 ZeroBranch $end
$var wire 64 2 Write_d [63:0] $end
$var wire 1 3 UseSP $end
$var wire 1 4 UncondBranch $end
$var wire 1 5 RegWrite $end
$var wire 5 6 Read_register_2 [4:0] $end
$var wire 5 7 Read_register_1 [4:0] $end
$var wire 64 8 Read_data_2 [63:0] $end
$var wire 64 9 Read_data_1 [63:0] $end
$var wire 64 : Read_d [63:0] $end
$var wire 1 ; MemWrite $end
$var wire 1 < MemToReg $end
$var wire 1 = MemRead $end
$var wire 1 > FlagWrite $end
$var wire 1 ? FlagBranch $end
$var wire 1 @ ALUSrc $end
$var wire 2 A ALUOp [1:0] $end
$var parameter 64 B INITPC $end
$var parameter 32 C INITSP $end
$var reg 64 D pc [63:0] $end
$scope module alu $end
$var wire 64 E B [63:0] $end
$var wire 1 - zero $end
$var wire 4 F alu_op [3:0] $end
$var wire 64 G A [63:0] $end
$var parameter 4 H OP_ADD $end
$var parameter 4 I OP_AND $end
$var parameter 4 J OP_CPZ $end
$var parameter 4 K OP_ORR $end
$var parameter 4 L OP_SUB $end
$var reg 64 M result [63:0] $end
$upscope $end
$scope module aluctrl $end
$var wire 32 N instruction [31:0] $end
$var wire 2 O ALUOp [1:0] $end
$var reg 4 P alu_op [3:0] $end
$upscope $end
$scope module control_unit $end
$var wire 32 Q instruction [31:0] $end
$var reg 2 R ALUOp [1:0] $end
$var reg 1 @ ALUSrc $end
$var reg 1 ? FlagBranch $end
$var reg 1 > FlagWrite $end
$var reg 1 = MemRead $end
$var reg 1 < MemToReg $end
$var reg 1 ; MemWrite $end
$var reg 1 S Reg2Loc $end
$var reg 1 5 RegWrite $end
$var reg 1 4 UncondBranch $end
$var reg 1 3 UseSP $end
$var reg 1 1 ZeroBranch $end
$upscope $end
$scope module data_memory $end
$var wire 1 = MemRead $end
$var wire 1 ; MemWrite $end
$var wire 64 T Write_d [63:0] $end
$var wire 64 U address [63:0] $end
$var wire 1 # clk $end
$var parameter 32 V MEMSIZE $end
$var reg 64 W Read_d [63:0] $end
$upscope $end
$scope module instruction_memory $end
$var wire 32 X instruction [31:0] $end
$var wire 64 Y pc [63:0] $end
$var parameter 32 Z INSTRUCTION_N $end
$var parameter 32 [ MEMSIZE $end
$scope begin $ivl_for_loop0 $end
$var integer 32 \ i [31:0] $end
$upscope $end
$upscope $end
$scope module pad $end
$var wire 32 ] instruction [31:0] $end
$var reg 64 ^ padded_inst [63:0] $end
$upscope $end
$scope module registers $end
$var wire 5 _ Read_register_1 [4:0] $end
$var wire 5 ` Read_register_2 [4:0] $end
$var wire 1 5 RegWrite $end
$var wire 1 3 UseSP $end
$var wire 64 a Write_d [63:0] $end
$var wire 5 b Write_register [4:0] $end
$var wire 1 # clk $end
$var wire 1 $ reset $end
$var reg 64 c Read_data_1 [63:0] $end
$var reg 64 d Read_data_2 [63:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10000000000 [
b1000 Z
b10000000000 V
b110 L
b1 K
b111 J
b0 I
b10 H
b1111101000 C
b0 B
$end
#0
$dumpvars
bx d
bx c
bz b
b0 a
b0x000 `
b100 _
b0 ^
b11010010100000000000000010001000 ]
b10000000000 \
b0 Y
b11010010100000000000000010001000 X
b0 W
b0 U
bz T
0S
b0 R
b11010010100000000000000010001000 Q
b0 P
b0 O
b11010010100000000000000010001000 N
b0 M
bx G
b0 F
b0 E
b0 D
b0 A
0@
0?
0>
0=
0<
0;
b0 :
bx 9
bx 8
b100 7
b0x000 6
05
04
x3
b0 2
01
b0 0
b0 /
b0 .
1-
b11010010100000000000000010001000 ,
b0 +
b100 *
b100 )
b100 (
0'
bz &
z%
1$
0#
b0 "
0!
$end
#5000
1#
#10000
0#
0$
#15000
b0 6
b0 `
b1 7
b1 _
b1000 )
b11010010100000000000000000100000 ,
b11010010100000000000000000100000 N
b11010010100000000000000000100000 Q
b11010010100000000000000000100000 X
b11010010100000000000000000100000 ]
b1000 (
b1000 *
b100 "
b100 D
b100 Y
1#
#20000
0#
#25000
b0x 6
b0x `
b100 7
b100 _
b1100 )
b1011000000000000000000010000001 ,
b1011000000000000000000010000001 N
b1011000000000000000000010000001 Q
b1011000000000000000000010000001 X
b1011000000000000000000010000001 ]
b1100 (
b1100 *
b1000 "
b1000 D
b1000 Y
1#
#30000
0#
#35000
b0x0 6
b0x0 `
b1101 7
b1101 _
b10000 )
b11010010100000000000000110100010 ,
b11010010100000000000000110100010 N
b11010010100000000000000110100010 Q
b11010010100000000000000110100010 X
b11010010100000000000000110100010 ]
b10000 (
b10000 *
b1100 "
b1100 D
b1100 Y
1#
#40000
0#
#45000
b0x 6
b0x `
b0 7
b0 _
b10100 )
b11010100000000000000000000000001 ,
b11010100000000000000000000000001 N
b11010100000000000000000000000001 Q
b11010100000000000000000000000001 X
b11010100000000000000000000000001 ]
b10100 (
b10100 *
b10000 "
b10000 D
b10000 Y
1#
#50000
0#
#55000
b0x000 6
b0x000 `
b1 7
b1 _
b11000 )
b11010010100000000000000000101000 ,
b11010010100000000000000000101000 N
b11010010100000000000000000101000 Q
b11010010100000000000000000101000 X
b11010010100000000000000000101000 ]
b11000 (
b11000 *
b10100 "
b10100 D
b10100 Y
1#
#60000
0#
#65000
b0 6
b0 `
b0 7
b0 _
b11100 )
b11010010100000000000000000000000 ,
b11010010100000000000000000000000 N
b11010010100000000000000000000000 Q
b11010010100000000000000000000000 X
b11010010100000000000000000000000 ]
b11100 (
b11100 *
b11000 "
b11000 D
b11000 Y
1#
#70000
0#
#75000
b0x 6
b0x `
b100000 )
b11010100000000000000000000000001 ,
b11010100000000000000000000000001 N
b11010100000000000000000000000001 Q
b11010100000000000000000000000001 X
b11010100000000000000000000000001 ]
b100000 (
b100000 *
b11100 "
b11100 D
b11100 Y
1#
#80000
0#
#85000
bx 6
bx `
b1 7
b1 _
b100100 )
b11010101010000000110010000111111 ,
b11010101010000000110010000111111 N
b11010101010000000110010000111111 Q
b11010101010000000110010000111111 X
b11010101010000000110010000111111 ]
b100100 (
b100100 *
b100000 "
b100000 D
b100000 Y
1#
#90000
0#
#95000
b101000 )
b101000 (
b101000 *
b100100 "
b100100 D
b100100 Y
1#
#100000
0#
#105000
b101100 )
b101100 (
b101100 *
b101000 "
b101000 D
b101000 Y
1#
#110000
0#
